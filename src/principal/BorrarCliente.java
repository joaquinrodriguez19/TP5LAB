/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package principal;

import java.awt.Component;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.YES_NO_OPTION;
import static javax.swing.ListSelectionModel.SINGLE_SELECTION;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mauricio
 */
public class BorrarCliente extends javax.swing.JInternalFrame {

    /**
     * Creates new form BorrarCliente
     */
    
    private final Directorio directorio;
    
    private final DefaultTableModel modeloTabla = new DefaultTableModel(new Object[]{"DNI","Apellido","Nombre","Dirección","Ciudad","Teléfono"}, 0){
            @Override public boolean isCellEditable(int row, int col){ return false; }
        };
    
    private final DefaultListModel<String> modeloLista = new DefaultListModel<>();
    private final ArrayList<String> listaDni = new ArrayList<>();
    private Long borrar;
    
    public BorrarCliente(Directorio directorio) {
        super("Borrar Cliente", true, true, true, true);
        this.directorio = directorio;
        
        initComponents();        
        
        lstBusqueda.setModel(modeloLista);
        lstBusqueda.setSelectionMode(SINGLE_SELECTION);
        
        tblResultado.setModel(modeloTabla);
        modeloTabla.setRowCount(0);
        
        txtDni.getDocument().addDocumentListener(new DocumentListener() {
            @Override public void insertUpdate(DocumentEvent e) { aplicarFiltro(); }
            @Override public void removeUpdate(DocumentEvent e) { aplicarFiltro(); }
            @Override public void changedUpdate(DocumentEvent e) { aplicarFiltro(); }
            private void aplicarFiltro() {
                filtrarLista(txtDni.getText().trim());
            }
        });
        
        lstBusqueda.addListSelectionListener(event -> {
        if (!event.getValueIsAdjusting()) {
            String seleccionado = lstBusqueda.getSelectedValue();
            if (seleccionado != null && !seleccionado.isEmpty()) {
                try {
                    int dni = Integer.parseInt(seleccionado);
                    Map.Entry<Long, Contacto> entrada = buscarPorDni(dni);
                    if (entrada != null) {
                        recargarTabla(entrada);
                        borrar = entrada.getKey();
                    } else {
                        modeloTabla.setRowCount(0);
                    }
                } catch (NumberFormatException e) {
                    modeloTabla.setRowCount(0);
                }
            }
        }
    });
        
        obtenerDni();
        recargarLista(listaDni);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblDni = new javax.swing.JLabel();
        txtDni = new javax.swing.JTextField();
        scrBusqueda = new javax.swing.JScrollPane();
        lstBusqueda = new javax.swing.JList<>();
        scrResultado = new javax.swing.JScrollPane();
        tblResultado = new javax.swing.JTable();
        lblTitulo = new javax.swing.JLabel();
        btnBorrar = new javax.swing.JButton();

        lblDni.setText("DNI");

        txtDni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDniActionPerformed(evt);
            }
        });

        lstBusqueda.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        scrBusqueda.setViewportView(lstBusqueda);

        tblResultado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        scrResultado.setViewportView(tblResultado);

        lblTitulo.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblTitulo.setText("Borrar cliente");

        btnBorrar.setText("Borrar");
        btnBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(scrBusqueda)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblDni)
                                        .addGap(28, 28, 28)
                                        .addComponent(txtDni, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(35, 35, 35)
                                .addComponent(scrResultado, javax.swing.GroupLayout.PREFERRED_SIZE, 667, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(399, 399, 399)
                                .addComponent(lblTitulo))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(437, 437, 437)
                        .addComponent(btnBorrar)))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitulo)
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDni)
                    .addComponent(txtDni, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(scrResultado, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(scrBusqueda, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE))
                .addGap(33, 33, 33)
                .addComponent(btnBorrar)
                .addContainerGap(40, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtDniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDniActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDniActionPerformed

    private void btnBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarActionPerformed
        // TODO add your handling code here:
        int respuesta = JOptionPane.showConfirmDialog(this,"Seguro que quiere borrar el cliente?", "Borrar Cliente", YES_NO_OPTION);
        if(respuesta == 0) {
            directorio.borrarContacto(borrar);
            obtenerDni();
            recargarLista(listaDni);
            modeloTabla.setRowCount(0);
            txtDni.setText("");
        } else {
            return;
        }
    }//GEN-LAST:event_btnBorrarActionPerformed

    
    private void obtenerDni() {
        listaDni.clear();
        for(Map.Entry<Long, Contacto> entry : directorio.entrySet()) {
            listaDni.add(String.valueOf(entry.getValue().getDni()));
        }
    }
    
    private Map.Entry<Long, Contacto> buscarPorDni(int dni) {
    for (Map.Entry<Long, Contacto> entry : directorio.entrySet()) {
        Contacto c = entry.getValue();
        if (c != null && c.getDni() == dni) {
            return entry;
        }
    }
    return null;
}
    
    private void recargarTabla(Map.Entry<Long, Contacto> contacto){
        modeloTabla.setRowCount(0);
        modeloTabla.addRow(new Object[]{
                    contacto.getValue().getDni(),
                    contacto.getValue().getApellido(),
                    contacto.getValue().getNombre(),
                    contacto.getValue().getDireccion(),
                    contacto.getValue().getCiudad(),
                    contacto.getKey() // Teléfono
                });
    }
    
    private void recargarLista(List<String> lista) {
        modeloLista.clear();
        for(String dni : lista) {
            modeloLista.addElement(dni);
        }
    }
    
    private void filtrarLista(String filtro) {
        if (filtro.isEmpty()) {
            recargarLista(listaDni);
            return;
        }
        List<String> filtrados = new ArrayList<>();
        for (String dni : listaDni) {
            if (dni.startsWith(filtro)) filtrados.add(dni);
        }
        recargarLista(filtrados);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBorrar;
    private javax.swing.JLabel lblDni;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JList<String> lstBusqueda;
    private javax.swing.JScrollPane scrBusqueda;
    private javax.swing.JScrollPane scrResultado;
    private javax.swing.JTable tblResultado;
    private javax.swing.JTextField txtDni;
    // End of variables declaration//GEN-END:variables
}
